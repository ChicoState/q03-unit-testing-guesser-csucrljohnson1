        -:    0:Source:Guesser.cpp
        -:    0:Graph:Guesser.gcno
        -:    0:Data:Guesser.gcda
        -:    0:Runs:7
        -:    1:#include "Guesser.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using std::string;
        -:    5:
        -:    6:/*
        -:    7:  Returns a whole number representing the distance between the guess,
        -:    8:  provided as an argument, and the secret. The distance represents the number
        -:    9:  of characters that would have to be changed at the same location to match
        -:   10:  the other string. When the two strings are identical, the distance is 0,
        -:   11:  but for each letter different, the distance increases by 1. When the
        -:   12:  strings are different lengths, each of the extra characters in the longer
        -:   13:  string also counts as an increase in 1 to the distance, up to the length of
        -:   14:  the secret; in other words, if m_secret has a 10 characters and the guess
        -:   15:  has 100, the distance is 10. ***highest distance has to be truncated to length of the secret
        -:   16:*/
function _ZN7Guesser8distanceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 606 returned 100% blocks executed 100%
      606:   17:unsigned int Guesser::distance(string guess){
      606:   18:   unsigned int count=0;
      606:   19:   if(guess.size() <= m_secret.size()) {
call    0 returned 606
call    1 returned 606
branch  2 taken 579 (fallthrough)
branch  3 taken 27
     3155:   20:       for (int i = 0; i < guess.size(); i++) {
call    0 returned 3155
branch  1 taken 2576
branch  2 taken 579 (fallthrough)
     2576:   21:           if (guess.at(i) != m_secret.at(i)) {
call    0 returned 2576
call    1 returned 2576
branch  2 taken 38 (fallthrough)
branch  3 taken 2538
       38:   22:               count++;
        -:   23:           }
        -:   24:       }
      579:   25:       count += m_secret.size() - guess.size();
call    0 returned 579
call    1 returned 579
        -:   26:   }
       27:   27:   else if(guess.size() >= m_secret.size()) {
call    0 returned 27
call    1 returned 27
branch  2 taken 27 (fallthrough)
branch  3 taken 0
      801:   28:       for (int i = 0; i < m_secret.size(); i++) {
call    0 returned 801
branch  1 taken 774
branch  2 taken 27 (fallthrough)
      774:   29:           if (guess.at(i) != m_secret.at(i)) {
call    0 returned 774
call    1 returned 774
branch  2 taken 3 (fallthrough)
branch  3 taken 771
        3:   30:               count++;
        -:   31:           }
        -:   32:       }
       27:   33:       count += guess.size() - m_secret.size();
call    0 returned 27
call    1 returned 27
        -:   34:   }
      606:   35:    if(count>m_secret.size()){
call    0 returned 606
branch  1 taken 3 (fallthrough)
branch  2 taken 603
        3:   36:        count = m_secret.size();
call    0 returned 3
        -:   37:    }
      606:   38:  return count;
        -:   39:}
        -:   40:
        -:   41:/*
        -:   42:  Constructor requires that the secret phrase is provided its value as
        -:   43:  an argument. This secret will not change for the lifespan of an instance
        -:   44:  of any Guesser object and must have a length of 32 characters or less,
        -:   45:  otherwise, it will be truncated at that length.
        -:   46:*/
function _ZN7GuesserC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 80 returned 100% blocks executed 89%
       80:   47:Guesser::Guesser(string secret){
call    0 returned 80
       80:   48:    if(secret.length() <= 32){
call    0 returned 80
branch  1 taken 65 (fallthrough)
branch  2 taken 15
       65:   49:        m_secret = secret;
call    0 returned 65
branch  1 taken 65 (fallthrough)
branch  2 taken 0 (throw)
        -:   50:    }
        -:   51:    else{
       15:   52:        secret.resize(32);
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15:   53:        m_secret = secret;
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
        -:   54:    }
       80:   55:    m_remaining = 3;
       80:   56:}
call    0 never executed
        -:   57:
        -:   58:/*
        -:   59:  Determines and returns whether the provided guess matches the secret
        -:   60:  phrase. However, the function also returns false if the secret is locked,
        -:   61:  which happens if either (or both): 
        -:   62:    (A) there are no remaining guesses allowed
        -:   63:    (B) the function detects brute force, as indicated by a guess that has a
        -:   64:        distance greater than 2 from the secret
        -:   65:  See the remaining() and distance() functions for specifications regarding
        -:   66:  determining how many guesses are remaining and the distance between a guess
        -:   67:  and the secret.
        -:   68:*/
function _ZN7Guesser5matchENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 230 returned 100% blocks executed 71%
      230:   69:bool Guesser::match(string guess){
      230:   70:    if(distance(guess) > 2 || remaining() == 0){
call    0 returned 230
branch  1 taken 230 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 230
branch  4 taken 230 (fallthrough)
branch  5 taken 0 (throw)
branch  6 taken 202 (fallthrough)
branch  7 taken 28
call    8 returned 202
branch  9 taken 14 (fallthrough)
branch 10 taken 188
branch 11 taken 230 (fallthrough)
branch 12 taken 0
call   13 returned 230
branch 14 taken 42 (fallthrough)
branch 15 taken 188
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
       42:   71:        m_remaining = 0;
       42:   72:        return false;
        -:   73:    }
      188:   74:    else if(distance(guess) > 0 && distance(guess) <=2 && remaining() > 0){
call    0 returned 188
branch  1 taken 188 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 188
branch  4 taken 188 (fallthrough)
branch  5 taken 0 (throw)
branch  6 taken 59 (fallthrough)
branch  7 taken 129
call    8 returned 59
branch  9 taken 59 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 59
branch 12 taken 59 (fallthrough)
branch 13 taken 0 (throw)
branch 14 taken 59 (fallthrough)
branch 15 taken 0
call   16 returned 59
branch 17 taken 59 (fallthrough)
branch 18 taken 0
branch 19 taken 59 (fallthrough)
branch 20 taken 129
call   21 returned 59
branch 22 taken 188 (fallthrough)
branch 23 taken 0
call   24 returned 188
branch 25 taken 59 (fallthrough)
branch 26 taken 129
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
call   33 never executed
       59:   75:        m_remaining--;
       59:   76:        return false;
        -:   77:    }
     129*:   78:    else if(distance(guess) == 0 && remaining() > 0 && (m_secret.size() == guess.size())) {
call    0 returned 129
branch  1 taken 129 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 129
branch  4 taken 129 (fallthrough)
branch  5 taken 0 (throw)
branch  6 taken 129 (fallthrough)
branch  7 taken 0
call    8 returned 129
branch  9 taken 129 (fallthrough)
branch 10 taken 0
call   11 returned 129
call   12 returned 129
branch 13 taken 129 (fallthrough)
branch 14 taken 0
branch 15 taken 129 (fallthrough)
branch 16 taken 0
call   17 returned 129
branch 18 taken 129 (fallthrough)
branch 19 taken 0
branch 20 never executed
branch 21 never executed
call   22 never executed
      129:   79:        m_remaining = 3;
      129:   80:        return true;
        -:   81:    }
        -:   82:    else{
    #####:   83:        return false;
        -:   84:    }
        -:   85:
        -:   86:}
        -:   87:
        -:   88:/*
        -:   89:  Returns the number of guesses remaining. A Guesser object allows up to
        -:   90:  three (3) consecutive guesses without a match. If three guesses are made
        -:   91:  without any being a true match, the secret is locked. However, whenever
        -:   92:  an unlocked secret is guessed with a true match, the guesses remaining
        -:   93:  reset to three (3).
        -:   94:*/
function _ZN7Guesser9remainingEv called 390 returned 100% blocks executed 100%
      390:   95:unsigned int Guesser::remaining(){
      390:   96:  return m_remaining;
        -:   97:}
        -:   98:
